[{"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsChart.js":"1","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\Main.js":"2","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceBasicInfo.js":"3","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ManageServiceTile.js":"4","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\API.js":"5","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Service.js":"6","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\Main.js":"7","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Main.js":"8","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\MachineTile\\MachineTile.js":"9","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Tables\\DashboardTable.js":"10","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\Chart.js":"11","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\MachineBar.js":"12","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceMobile.js":"13","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Header.js":"14","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\ResponseParser.js":"15","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NewWebhookItem.js":"16","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\reportWebVitals.js":"17","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\UserPreferencesManager.js":"18","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\MetricTile.js":"19","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\index.js":"20","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\signalr-context.js":"21","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\WebhookItem.js":"22","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceHeader.js":"23","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\Label.js":"24","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\App.js":"25","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceHeaderMobile.js":"26","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Authentication\\InMemoryJwt.js":"27","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsSettings.js":"28","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\MachineTile\\MachineTileMobile.js":"29","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Helpers.js":"30","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\LoginModal.js":"31","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\ApprovalModal.js":"32","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\EventPushModal.js":"33"},{"size":1514,"mtime":1615571081412,"results":"34","hashOfConfig":"35"},{"size":6982,"mtime":1617198167536,"results":"36","hashOfConfig":"35"},{"size":784,"mtime":1614611252026,"results":"37","hashOfConfig":"35"},{"size":4466,"mtime":1615809169024,"results":"38","hashOfConfig":"35"},{"size":5108,"mtime":1617198311733,"results":"39","hashOfConfig":"35"},{"size":4176,"mtime":1614614461556,"results":"40","hashOfConfig":"35"},{"size":4725,"mtime":1617875059433,"results":"41","hashOfConfig":"35"},{"size":8575,"mtime":1617198167536,"results":"42","hashOfConfig":"35"},{"size":2002,"mtime":1614766812452,"results":"43","hashOfConfig":"35"},{"size":2055,"mtime":1614766303219,"results":"44","hashOfConfig":"35"},{"size":2204,"mtime":1614766131179,"results":"45","hashOfConfig":"35"},{"size":982,"mtime":1614766852756,"results":"46","hashOfConfig":"35"},{"size":3829,"mtime":1617004097995,"results":"47","hashOfConfig":"35"},{"size":895,"mtime":1617195218875,"results":"48","hashOfConfig":"35"},{"size":610,"mtime":1614774434656,"results":"49","hashOfConfig":"35"},{"size":2661,"mtime":1614599989151,"results":"50","hashOfConfig":"35"},{"size":375,"mtime":1607351855515,"results":"51","hashOfConfig":"35"},{"size":4184,"mtime":1615991437696,"results":"52","hashOfConfig":"35"},{"size":635,"mtime":1614765728504,"results":"53","hashOfConfig":"35"},{"size":684,"mtime":1607351855515,"results":"54","hashOfConfig":"35"},{"size":1098,"mtime":1613471733608,"results":"55","hashOfConfig":"35"},{"size":2051,"mtime":1617004097994,"results":"56","hashOfConfig":"35"},{"size":1553,"mtime":1615822330762,"results":"57","hashOfConfig":"35"},{"size":279,"mtime":1614765533984,"results":"58","hashOfConfig":"35"},{"size":914,"mtime":1617004098167,"results":"59","hashOfConfig":"35"},{"size":1038,"mtime":1615989917699,"results":"60","hashOfConfig":"35"},{"size":1915,"mtime":1617198228303,"results":"61","hashOfConfig":"35"},{"size":2436,"mtime":1616593903505,"results":"62","hashOfConfig":"35"},{"size":988,"mtime":1614766059796,"results":"63","hashOfConfig":"35"},{"size":1140,"mtime":1616765956915,"results":"64","hashOfConfig":"35"},{"size":1800,"mtime":1617875050387,"results":"65","hashOfConfig":"35"},{"size":703,"mtime":1617011367798,"results":"66","hashOfConfig":"35"},{"size":1544,"mtime":1617874214673,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"oxmjk5",{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsChart.js",[],["143","144"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\Main.js",["145","146","147","148","149","150"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { SignalRContext } from \"../../utils/signalr-context\";\r\nimport { useWindowSize } from \"../../Hooks\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DatePicker from 'react-datepicker';\r\nimport MachineBar from \"../Common/MetricsComponents/MachineBar\"\r\nimport NotificationCharts from \"./components/NotificationsChart\";\r\nimport DashboardTable from \"../Common/Tables/DashboardTable\";\r\nimport ServiceBasicInfo from \"./components/ServiceBasicInfo\"\r\nimport NotificationSettings from \"./components/NotificationsSettings\"\r\nimport ManageServiceTile from './components/ManageServiceTile'\r\nimport './components/ServiceDetails.css';\r\nimport { API } from \"../../utils/API\";\r\nimport Helpers from \"../../utils/Helpers\"\r\nimport ResponseParser from '../../utils/ResponseParser'\r\nimport InMemoryJwt from '../../utils/Authentication/InMemoryJwt'\r\nimport LoginModal from '../Common/Modals/LoginModal'\r\nimport Modal from \"react-modal\";\r\nimport EventPushModal from '../Common/Modals/EventPushModal'\r\n\r\nconst ServiceDetails = ()=>{\r\n\r\n  const connection = useContext(SignalRContext);\r\n  const { machineName, serviceName } = useParams();\r\n  const [machineState, setMachineState] = useState({});\r\n  const [machineAddress, setMachineAddress] = useState(\"\");\r\n  const [serviceStatus, setServiceStatus] = useState({});\r\n  const [serviceEvents, setServiceEvents] = useState([]);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [notifierTypes, setNotifierTypes] = useState([]);\r\n  const [notifiers, setNotifiers] = useState([]);\r\n  const windowSize = useWindowSize();\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showEventModal, setShowEventModal] = useState(false);\r\n  const [lastEvent, setLastEvent] = useState(null);\r\n \r\n  useEffect(()=>{\r\n    setLoginStatus(InMemoryJwt.getTokenRefreshed()!=null);\r\n  });\r\n\r\n    useEffect(() => {\r\n      const init = async () => {\r\n          await Promise.all([\r\n            API.fetchServiceEvents(machineName, serviceName).then((response) => {\r\n              const cd =[];\r\n              const td = [];\r\n              response?.data.map((e, i)=>{\r\n                let val = 0;\r\n                e.status.toLowerCase(e.status) === 'running' ? val = 1 : val = 0.3\r\n                cd.push({time:Date.parse(e.createdAt), value:val});\r\n                td.push({agent:e.agent,time:Helpers.formatDate(e.createdAt), status:e.status});\r\n              })\r\n              setChartData(cd);\r\n              setServiceEvents(td);\r\n            }),\r\n            API.fetchMachineList().then((response) => {\r\n              let ipAddress = response?.data.filter(\r\n                (ms) => ms.name == machineName\r\n              )[0];\r\n              setMachineAddress(ipAddress?.address);\r\n            }),\r\n            API.fetchServicesList(machineName).then((response) => {\r\n              let service = response.data.filter(x=>{ return x.name === serviceName})[0];\r\n              console.log(service);\r\n              let newServiceState = {\r\n                machineName:machineName,\r\n                serviceName:serviceName,\r\n                logonAs:service.logOnAs,\r\n                description:service.description,\r\n                status:service.status\r\n              };\r\n              setServiceStatus(newServiceState);\r\n              let currentStatus = 0;\r\n              newServiceState.status.toLowerCase()==='running' ? currentStatus = 1: currentStatus = 0.3\r\n              let newPoint = {time:Date.now(), value: currentStatus}\r\n              setChartData(prevState=>[...prevState, newPoint]);\r\n            }),\r\n            API.getNotifierTypes().then((response) => {\r\n              setNotifierTypes(response?.data);\r\n            }),\r\n            API.fetchWebhooks(machineName, serviceName).then((response) => {\r\n              setNotifiers(response?.data.notifiers);\r\n            })\r\n          ]);\r\n        };\r\n      init();\r\n    }, []);//[machineName, serviceName]\r\n\r\n   \r\n    useEffect(() => {\r\n      const init = async () => {\r\n        if (connection !== null) {\r\n          connection.on(\"MachineHealthReceived\", (response) => {\r\n            if (response?.agent === machineName) {\r\n              let updated = ResponseParser.MachineHealtStatusReceived(response);\r\n              setMachineState(updated);\r\n            }\r\n          });\r\n          connection.on(\"ServiceStatusChanged\", (response) => {\r\n            if (response?.agent === machineName && response?.name ===serviceName) {\r\n              let update = Object.assign({}, serviceStatus);\r\n              update.status = response.status;\r\n              setServiceStatus(update);\r\n              let val = 0;\r\n              response.status.toLowerCase(response.status) === 'running' ? val = 1 : val = 0.3\r\n              let newPoint = {time:Date.now(), value: val};\r\n              setChartData(prevState=>[...prevState, newPoint]);\r\n            }\r\n            let newEvent = {\r\n                              agent:response.agent, \r\n                              service:response.name, \r\n                              time:Helpers.formatDate(Date.now()), \r\n                              status:response.status};\r\n\r\n            setLastEvent(newEvent);\r\n            setShowEventModal(true);\r\n          });\r\n        }\r\n      };\r\n  \r\n      init();\r\n      return () => {\r\n        connection?.off(\"MachineHealthReceived\");\r\n        connection?.off(\"ServiceStatusChanged\");\r\n      };\r\n    }, [connection, machineName]);\r\n\r\n  Modal.defaultStyles.overlay.backgroundColor = \"#2B3139\";\r\n  const showModalHandler = () => {\r\n    let isShowing = showModal;\r\n    setShowModal(!isShowing);\r\n  };\r\n    if (!loginStatus) {\r\n      return <LoginModal decline={showModalHandler}></LoginModal>;\r\n    }\r\n  \r\nreturn (\r\n    <div>\r\n      {\r\n        windowSize<=768 ? null : <MachineBar\r\n        machine={machineName}\r\n        address={machineAddress}\r\n        cpu={machineState.cpu}\r\n        ram={machineState.ram}\r\n        disc={machineState.disc}\r\n        services={machineState.services}>\r\n      </MachineBar> \r\n      }\r\n       \r\n<div className=\"label-settings-container\">\r\n   <div className=\"label-chart-container\">\r\n       <ServiceBasicInfo serviceInfo={serviceStatus}/>\r\n       <ManageServiceTile\r\n        agent={machineName}\r\n        serviceName={serviceName}\r\n        status={serviceStatus.status}/>\r\n       <NotificationCharts data={chartData}/>\r\n   </div>\r\n     <NotificationSettings\r\n      types={notifierTypes}   \r\n      notifiers={notifiers}\r\n      agent={machineName}\r\n      service={serviceName}/>\r\n    </div> \r\n      <DashboardTable tableData={serviceEvents}/>\r\n        <EventPushModal \r\n        isOpen={showEventModal} \r\n        event={lastEvent}\r\n        closeAction = {setShowEventModal}\r\n        isOpen={showEventModal}/>\r\n      <DatePicker selected={new Date(\"2021-02-19\")} onChange={date => console.log(date)} />\r\n  </div>    \r\n  )\r\n}\r\n\r\nexport default ServiceDetails;","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceBasicInfo.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ManageServiceTile.js",["151","152"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\API.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Service.js",["153"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\Main.js",["154","155"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Main.js",["156","157","158","159","160"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useWindowSize } from \"../../Hooks\";\r\nimport Modal from \"react-modal\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport Service from \"./Service\";\r\nimport ServiceMobile from \"./ServiceMobile\";\r\nimport ServiceHeader from \"./ServiceHeader\";\r\nimport MachineBar from \"../Common/MetricsComponents/MachineBar\";\r\nimport \"../Common/MetricsComponents/MachineDetails.css\";\r\nimport { API } from \"../../utils/API\";\r\nimport {UserPreferencesManager} from '../../utils/UserPreferencesManager'\r\nimport { SignalRContext } from \"../../utils/signalr-context\";\r\nimport ServiceHeaderMobile from \"./ServiceHeaderMobile\";\r\nimport ResponseParser from '../../utils/ResponseParser'\r\nimport LoginModal from \"../Common/Modals/LoginModal\";\r\nimport EventPushModal from '../Common/Modals/EventPushModal'\r\nimport InMemoryJwt from '../../utils/Authentication/InMemoryJwt'\r\nimport Helpers from '../../utils/Helpers'\r\nimport DashboardTable from '../Common/Tables/DashboardTable'\r\n\r\n\r\nconst Dashboards = () => {\r\n  const windowSize = useWindowSize();\r\n  const { machineName } = useParams();\r\n  const [machineState, setMachineState] = useState({});\r\n\r\n  const [services, setServices] = useState([]);\r\n  const [favouriteServices,setFavouriteServices] = useState([]);\r\n  const [displayedServices, setDisplayedServices] = useState([]);\r\n  const [showFavourites, setShowFavourites] = useState(false);\r\n\r\n  const [connectionState] = useState(\"\");\r\n  const [machineAddress, setMachineAddress] = useState(\"\");\r\n  const connection = useContext(SignalRContext);\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n  const [showEventModal, setShowEventModal] = useState(false);\r\n  const [serviceEvents, setServiceEvents] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    setLoginStatus(InMemoryJwt.getTokenRefreshed()!=null);\r\n  });\r\n\r\n//#region fetch data effects\r\nuseEffect(() => {\r\n  const init = async () => {\r\n    await Promise.all([\r\n      API.fetchServicesList(machineName).then((response) => {\r\n        setServices(response?.data);\r\n      }),\r\n      API.fetchMachineList().then((response) => {\r\n        let ipAddress = response?.data.filter(\r\n          (ms) => ms.name === machineName\r\n        )[0];\r\n        setMachineAddress(ipAddress?.address);\r\n      }),\r\n      API.fetchLastEvents(10).then((response) => {\r\n        const td = [];\r\n        response?.data.map((e, i)=>{\r\n          td.push({agent:e.agent,service:e.service,time:Helpers.formatDate(e.createdAt), status:e.status});\r\n        })\r\n        setServiceEvents(td);\r\n      })\r\n    ]);\r\n  };\r\n  init();\r\n}, [machineName]);\r\n\r\nuseEffect(() => {\r\n  const init = async () => {\r\n    if (connection !== null) {\r\n      connection.on(\"MachineHealthReceived\", (response) => {\r\n        if (response?.agent === machineName) {\r\n          let updated = ResponseParser.MachineHealtStatusReceived(response);\r\n          setMachineState(updated);\r\n        }\r\n      });\r\n      connection.on(\"ServiceStatusChanged\", (response) => {\r\n        if (response?.agent === machineName) {\r\n          let updated = [...services];\r\n          let indexOfChangedService = updated.findIndex(\r\n            (x) => x.name.toLowerCase() === response.name.toLowerCase()\r\n          );\r\n          updated[indexOfChangedService].status = response.status;\r\n          setServices(updated);\r\n        }\r\n        let newRecord = {agent:response.agent, service:response.name, time:Helpers.formatDate(Date.now()), status:response.status}\r\n        setServiceEvents(prev=>[...prev, newRecord]);\r\n        setShowEventModal(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  init();\r\n  return () => {\r\n    connection?.off(\"MachineHealthReceived\");\r\n    connection?.off(\"ServiceStatusChanged\");\r\n  };\r\n}, [connection, services, machineName]);\r\n\r\nuseEffect(()=>{\r\n  let favourites = UserPreferencesManager.getFavouritesByAgent(machineName, services);\r\n  setFavouriteServices(favourites);\r\n \r\n}, [services]);\r\n\r\nuseEffect(()=>{\r\n  showFavourites? setDisplayedServices(favouriteServices) : setDisplayedServices(services);\r\n}, [services, showFavourites])\r\n\r\n\r\n//#endregion\r\n\r\n//#region search and pagination services\r\nconst servicesPerPage = 10;\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  };\r\n\r\n  Modal.defaultStyles.overlay.backgroundColor = \"#2B3139\";\r\n  const [showModal, setShowModal] = useState(false);\r\n  const showModalHandler = () => {\r\n    let isShowing = showModal;\r\n    setShowModal(!isShowing);\r\n  };\r\n\r\n  // search bar\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n \r\n  useEffect(() => {\r\n      const results = displayedServices?.filter((service) =>\r\n      service.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n      setSearchResults(results);\r\n  }, [searchTerm, services, displayedServices]);\r\n\r\n  const indexOfLastService = activePage * servicesPerPage;\r\n  const indexOfFirstService = indexOfLastService - servicesPerPage;\r\n  const currentServices = searchResults.slice(\r\n    indexOfFirstService,\r\n    indexOfLastService\r\n  );\r\n  const moreResults = searchResults.length > servicesPerPage;\r\n\r\n\r\n\r\n//#endregion\r\n \r\n\r\n  if (!loginStatus) {\r\n    return <LoginModal decline={showModalHandler}></LoginModal>;\r\n  }\r\n\r\n\r\n  if (windowSize <= 768) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <ServiceHeaderMobile\r\n            setSearchTerm={setSearchTerm}\r\n            searchTerm={searchTerm}\r\n            setActivePage={setActivePage}\r\n            showFavourites={showFavourites}\r\n            setShowFavourites={setShowFavourites}\r\n          />\r\n          {currentServices && currentServices.length > 0 ? (\r\n            currentServices.map((service, index) => {\r\n              return (\r\n                //tutaj zamienilem hubConnection na connection ale takie przekazywanie polaczenia przez propsy nie jest potrzebne, teraz mozna uzywac useContext w komponentach\r\n                <ServiceMobile\r\n                  key={index}\r\n                  service={service}\r\n                  index={index}\r\n                  agent={machineName}\r\n                  connection={connection}\r\n                  connectionState={connectionState}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <p className=\"warning-text\">No services detected</p>\r\n          )}\r\n\r\n          {moreResults && (\r\n            <Pagination\r\n              activePage={activePage}\r\n              itemsCountPerPage={servicesPerPage}\r\n              totalItemsCount={searchResults.length}\r\n              pageRangeDisplayed={3}\r\n              onChange={handlePageChange}\r\n              prevPageText=\"<\"\r\n              nextPageText=\">\"\r\n              firstPageText=\"..\"\r\n              lastPageText=\"..\"\r\n            />\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <MachineBar\r\n          machine={machineName}\r\n          address={machineAddress}\r\n          cpu={machineState.cpu}\r\n          ram={machineState.ram}\r\n          disc={machineState.disc}\r\n          services={machineState.services}\r\n        ></MachineBar>\r\n      </div>\r\n      <ServiceHeader\r\n        setSearchTerm={setSearchTerm}\r\n        searchTerm={searchTerm}\r\n        setActivePage={setActivePage}\r\n        showFavourites={showFavourites}\r\n        setShowFavourites={setShowFavourites}\r\n      />\r\n\r\n      {currentServices && currentServices.length > 0 ? (\r\n        currentServices.map((service, index) => {\r\n          return (\r\n            <Service\r\n              key={index}\r\n              service={service}\r\n              index={index}\r\n              agent={machineName}\r\n            />\r\n          );\r\n        })\r\n      ) : (\r\n        <p className=\"warning-text\">No services detected</p>\r\n      )}\r\n\r\n      {moreResults && (\r\n        <Pagination\r\n          activePage={activePage}\r\n          itemsCountPerPage={servicesPerPage}\r\n          totalItemsCount={searchResults.length}\r\n          pageRangeDisplayed={3}\r\n          onChange={handlePageChange}\r\n          prevPageText=\"<\"\r\n          nextPageText=\">\"\r\n          firstPageText=\"..\"\r\n          lastPageText=\"..\"\r\n        />\r\n      )}\r\n      <EventPushModal \r\n          isOpen={showEventModal} \r\n          event={serviceEvents[serviceEvents.length-1]}\r\n          closeAction = {setShowEventModal}\r\n          isOpen={showEventModal}\r\n        />\r\n      <DashboardTable tableData={serviceEvents}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboards;\r\n","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\MachineTile\\MachineTile.js",["161","162"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Tables\\DashboardTable.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\Chart.js",[],["163","164"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\MachineBar.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceMobile.js",["165"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Header.js",["166","167"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\ResponseParser.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NewWebhookItem.js",["168"],"import React, { useState, useEffect} from \"react\";\r\nimport Helpers from '../../../utils/Helpers';\r\nimport { API } from \"../../../utils/API\";\r\n    \r\n    const NewWebhookItem = (props)=>{\r\n        const [receiver, setReceiver] = useState(\"\");\r\n        const [webhook, setWebhook] = useState(-1);\r\n        const [displayCreateButton,setDisplayCreateButton ] = useState(true);\r\n\r\n        const changeTypeHandler = (e)=>{\r\n            let w = e.currentTarget.value;\r\n            setWebhook(w);\r\n        }\r\n\r\n        useEffect(() => {\r\n            console.log(webhook);\r\n         }, [webhook]);\r\n\r\n        const createNotifierHandler = ()=>{\r\n            API.createNotifier(props.agent, props.service, receiver, parseInt(webhook))\r\n            .then(response=>{\r\n                if(response.status >=200 &response.status<300){\r\n                    setDisplayCreateButton(false);\r\n                }\r\n            }).catch(e=>{console.log(e)});\r\n        }\r\n\r\n        const deleteNotifierCreatedHandler = ()=>{\r\n            API.deleteNotifier(props.agent, props.service, receiver)\r\n            .then(response=>{\r\n                if(response.status >=200 & response.status<300){\r\n                    props.deleteClick(props.index);\r\n                }\r\n            });\r\n            \r\n        }\r\n\r\n        const createButton = <p \r\n        className=\"gadget-btn webhook-setting-btn setting-accept-btn\"\r\n        onClick={createNotifierHandler}\r\n        >&#10003;</p>\r\n\r\n        const removeNewItem = <p \r\n        className=\"gadget-btn webhook-setting-btn setting-delete-btn\"\r\n        onClick={deleteNotifierCreatedHandler}\r\n        >x</p>\r\n\r\n        const deletedCreatedItem = <p \r\n        className=\"gadget-btn webhook-setting-btn setting-delete-btn\"\r\n        onClick={()=>{props.deleteClick(props.index)}}\r\n        >x</p>\r\n\r\n    return (\r\n        <div className=\"webhook-item\">\r\n            <select\r\n            className=\"webhook-type\"\r\n            onChange={changeTypeHandler}\r\n            value={webhook}>\r\n                {\r\n                    props.types.map((t,i)=>{\r\n                       return (<option key={i} value={t[\"key\"]}>{Helpers.upperFirst(t[\"name\"])}</option>)\r\n                    })\r\n                }\r\n            </select>\r\n                <input \r\n                className=\"sink-input\"\r\n                placeholder=\"receiver\"\r\n                type=\"text\" \r\n                value={receiver}\r\n                onChange={(e)=>{setReceiver(e.target.value)}}\r\n                >\r\n                </input>\r\n                {displayCreateButton? createButton:null}\r\n                {removeNewItem}\r\n        </div>\r\n    )\r\n};\r\nexport default NewWebhookItem;",["169","170"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\reportWebVitals.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\UserPreferencesManager.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\MetricTile.js",["171"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\index.js",[],["172","173"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\signalr-context.js",["174","175"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { HubConnectionBuilder, LogLevel, HubConnectionState } from \"@microsoft/signalr\";\r\nimport {SIGNALR_URL} from \"../config\";\r\n\r\n\r\nconst SignalRContext = createContext(null)\r\n\r\nexport { SignalRContext }\r\n\r\nexport default ({ children }) => {\r\n    const [hubConnection, setHubConnection] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        const connection = new HubConnectionBuilder()\r\n            .withUrl(SIGNALR_URL)\r\n            .configureLogging(LogLevel.Critical)\r\n            .withAutomaticReconnect()\r\n            .build()\r\n\r\n        async function start() {\r\n            try {\r\n                await connection.start();\r\n                setHubConnection(connection)\r\n            } catch (err) {\r\n                console.log(err);\r\n                setTimeout(() => start(), 5000);\r\n            }\r\n        };\r\n        connection?.onclose(start);\r\n        start();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <SignalRContext.Provider value={hubConnection}>\r\n            {children}\r\n        </SignalRContext.Provider>\r\n    )\r\n}",["176","177"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\WebhookItem.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceHeader.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\MetricsComponents\\Label.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\App.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\ServiceHeaderMobile.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Authentication\\InMemoryJwt.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsSettings.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\MachineTile\\MachineTileMobile.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Helpers.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\LoginModal.js",["178"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\ApprovalModal.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Common\\Modals\\EventPushModal.js",["179","180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":38,"column":3,"nodeType":"187","endLine":38,"endColumn":12,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":48,"column":40,"nodeType":"191","messageId":"192","endLine":48,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":59,"column":33,"nodeType":"195","messageId":"196","endLine":59,"endColumn":35},{"ruleId":"185","severity":1,"message":"197","line":88,"column":8,"nodeType":"198","endLine":88,"endColumn":10,"suggestions":"199"},{"ruleId":"185","severity":1,"message":"200","line":127,"column":8,"nodeType":"198","endLine":127,"endColumn":33,"suggestions":"201"},{"ruleId":"202","severity":1,"message":"203","line":171,"column":9,"nodeType":"204","endLine":171,"endColumn":32},{"ruleId":"205","severity":1,"message":"206","line":15,"column":13,"nodeType":"207","messageId":"208","endLine":22,"endColumn":14},{"ruleId":"185","severity":1,"message":"209","line":29,"column":14,"nodeType":"198","endLine":29,"endColumn":16,"suggestions":"210"},{"ruleId":"205","severity":1,"message":"206","line":16,"column":9,"nodeType":"207","messageId":"208","endLine":23,"endColumn":10},{"ruleId":"189","severity":1,"message":"190","line":64,"column":34,"nodeType":"191","messageId":"192","endLine":64,"endColumn":36},{"ruleId":"202","severity":1,"message":"203","line":135,"column":11,"nodeType":"204","endLine":135,"endColumn":34},{"ruleId":"185","severity":1,"message":"186","line":40,"column":3,"nodeType":"187","endLine":40,"endColumn":12,"suggestions":"211"},{"ruleId":"189","severity":1,"message":"190","line":59,"column":34,"nodeType":"191","messageId":"192","endLine":59,"endColumn":36},{"ruleId":"185","severity":1,"message":"212","line":105,"column":4,"nodeType":"198","endLine":105,"endColumn":14,"suggestions":"213"},{"ruleId":"185","severity":1,"message":"214","line":109,"column":4,"nodeType":"198","endLine":109,"endColumn":30,"suggestions":"215"},{"ruleId":"202","severity":1,"message":"203","line":257,"column":11,"nodeType":"204","endLine":257,"endColumn":34},{"ruleId":"185","severity":1,"message":"216","line":20,"column":6,"nodeType":"198","endLine":20,"endColumn":13,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":59,"column":9,"nodeType":"220","endLine":59,"endColumn":44},{"ruleId":"181","replacedBy":"221"},{"ruleId":"183","replacedBy":"222"},{"ruleId":"205","severity":1,"message":"206","line":14,"column":9,"nodeType":"207","messageId":"208","endLine":21,"endColumn":10},{"ruleId":"185","severity":1,"message":"223","line":7,"column":5,"nodeType":"187","endLine":7,"endColumn":14,"suggestions":"224"},{"ruleId":"218","severity":1,"message":"219","line":21,"column":21,"nodeType":"220","endLine":21,"endColumn":53},{"ruleId":"225","severity":1,"message":"226","line":48,"column":15,"nodeType":"187","messageId":"227","endLine":48,"endColumn":33},{"ruleId":"181","replacedBy":"228"},{"ruleId":"183","replacedBy":"229"},{"ruleId":"218","severity":1,"message":"219","line":15,"column":21,"nodeType":"220","endLine":15,"endColumn":63},{"ruleId":"181","replacedBy":"230"},{"ruleId":"183","replacedBy":"231"},{"ruleId":"225","severity":1,"message":"232","line":2,"column":42,"nodeType":"187","messageId":"227","endLine":2,"endColumn":60},{"ruleId":"233","severity":1,"message":"234","line":10,"column":1,"nodeType":"235","endLine":40,"endColumn":2},{"ruleId":"181","replacedBy":"236"},{"ruleId":"183","replacedBy":"237"},{"ruleId":"218","severity":1,"message":"219","line":28,"column":25,"nodeType":"220","endLine":28,"endColumn":95},{"ruleId":"218","severity":1,"message":"219","line":40,"column":21,"nodeType":"220","endLine":40,"endColumn":54},{"ruleId":"218","severity":1,"message":"219","line":43,"column":21,"nodeType":"220","endLine":43,"endColumn":52},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoginStatus'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["240"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'machineName' and 'serviceName'. Either include them or remove the dependency array.","ArrayExpression",["241"],"React Hook useEffect has missing dependencies: 'serviceName' and 'serviceStatus'. Either include them or remove the dependency array.",["242"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'props.agent' and 'props.serviceName'. Either include them or remove the dependency array.",["243"],["244"],"React Hook useEffect has a missing dependency: 'machineName'. Either include it or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'favouriteServices'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDisplayedServices' needs the current value of 'favouriteServices'.",["246"],"React Hook useEffect has a missing dependency: 'machineTileState.show'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMachineTileState' needs the current value of 'machineTileState.show'.",["247"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["238"],["239"],"React Hook useEffect contains a call to 'setIsLoggedIn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["248"],"no-unused-vars","'deletedCreatedItem' is assigned a value but never used.","unusedVar",["238"],["239"],["238"],["239"],"'HubConnectionState' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["238"],["239"],"no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"249","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"249","fix":"264"},"Add dependencies array: []",{"range":"265","text":"266"},"Update the dependencies array to be: [machineName, serviceName]",{"range":"267","text":"268"},"Update the dependencies array to be: [connection, machineName, serviceName, serviceStatus]",{"range":"269","text":"270"},"Update the dependencies array to be: [props.agent, props.serviceName]",{"range":"271","text":"272"},{"range":"273","text":"266"},"Update the dependencies array to be: [machineName, services]",{"range":"274","text":"275"},"Update the dependencies array to be: [favouriteServices, services, showFavourites]",{"range":"276","text":"277"},"Update the dependencies array to be: [machineTileState.show, props]",{"range":"278","text":"279"},{"range":"280","text":"266"},[1943,1943],", []",[3995,3997],"[machineName, serviceName]",[5503,5528],"[connection, machineName, serviceName, serviceStatus]",[1174,1176],"[props.agent, props.serviceName]",[1907,1907],[3970,3980],"[machineName, services]",[4099,4125],"[favouriteServices, services, showFavourites]",[759,766],"[machineTileState.show, props]",[339,339]]