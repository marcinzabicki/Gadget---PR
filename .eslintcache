[{"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\index.js":"1","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Main.js":"2","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\LoginModal.js":"3","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\API.js":"4","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\signalr-context.js":"5","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Authentication\\InMemoryJwt.js":"6","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Header.js":"7","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\App.js":"8","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\reportWebVitals.js":"9","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\config.js":"10","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\Main.js":"11","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceEventsTable.js":"12","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsChart.js":"13","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceBasicInfo.js":"14","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\Main.js":"15","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\Label.js":"16","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Logs\\Logs.js":"17","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineBar\\MachineBar.js":"18","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Helpers.js":"19","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineTile\\MachineTile.js":"20","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsSettings.js":"21","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Service.js":"22","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\RestartModal.js":"23","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\Chart.js":"24","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\WebhookItem.js":"25","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NewWebhookItem.js":"26","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MetricTile.js":"27","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineTile\\MachineTileMobile.js":"28"},{"size":684,"mtime":1607351855515,"results":"29","hashOfConfig":"30"},{"size":7027,"mtime":1613668771837,"results":"31","hashOfConfig":"30"},{"size":1830,"mtime":1613642004300,"results":"32","hashOfConfig":"30"},{"size":4611,"mtime":1614270489377,"results":"33","hashOfConfig":"30"},{"size":1098,"mtime":1613471733608,"results":"34","hashOfConfig":"30"},{"size":411,"mtime":1611922688373,"results":"35","hashOfConfig":"30"},{"size":1233,"mtime":1613471779928,"results":"36","hashOfConfig":"30"},{"size":1512,"mtime":1613575954721,"results":"37","hashOfConfig":"30"},{"size":375,"mtime":1607351855515,"results":"38","hashOfConfig":"30"},{"size":384,"mtime":1614026791145,"results":"39","hashOfConfig":"30"},{"size":3871,"mtime":1613589071048,"results":"40","hashOfConfig":"30"},{"size":2088,"mtime":1613660275021,"results":"41","hashOfConfig":"30"},{"size":1030,"mtime":1614025625546,"results":"42","hashOfConfig":"30"},{"size":888,"mtime":1613587081915,"results":"43","hashOfConfig":"30"},{"size":4706,"mtime":1614330643013,"results":"44","hashOfConfig":"30"},{"size":279,"mtime":1613471733580,"results":"45","hashOfConfig":"30"},{"size":2121,"mtime":1613575954722,"results":"46","hashOfConfig":"30"},{"size":986,"mtime":1613471779924,"results":"47","hashOfConfig":"30"},{"size":1138,"mtime":1614265406236,"results":"48","hashOfConfig":"30"},{"size":1862,"mtime":1613472039419,"results":"49","hashOfConfig":"30"},{"size":2504,"mtime":1614330770359,"results":"50","hashOfConfig":"30"},{"size":2269,"mtime":1614023221501,"results":"51","hashOfConfig":"30"},{"size":689,"mtime":1613471733589,"results":"52","hashOfConfig":"30"},{"size":2204,"mtime":1607351855505,"results":"53","hashOfConfig":"30"},{"size":1088,"mtime":1614268417347,"results":"54","hashOfConfig":"30"},{"size":1718,"mtime":1614334254399,"results":"55","hashOfConfig":"30"},{"size":635,"mtime":1607351855508,"results":"56","hashOfConfig":"30"},{"size":960,"mtime":1613471733586,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"oxmjk5",{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\index.js",[],["127","128"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Main.js",["129","130","131"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useWindowSize } from \"../../Hooks\";\r\nimport Modal from \"react-modal\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport Service from \"./Service\";\r\nimport ServiceMobile from \"./ServiceMobile\";\r\nimport ServiceHeader from \"./ServiceHeader\";\r\nimport MachineBar from \"./MachineDetails/MachineBar/MachineBar\";\r\nimport \"../Dashboards/MachineDetails/MachineDetails.css\";\r\nimport { API } from \"../../utils/API\";\r\nimport { SignalRContext } from \"../../utils/signalr-context\";\r\nimport Logs from \"../Dashboards/Logs/Logs\";\r\nimport ServiceHeaderMobile from \"./ServiceHeaderMobile\";\r\nimport LoginModal from \"../LoginModal\";\r\n\r\nconst Dashboards = () => {\r\n  const windowSize = useWindowSize();\r\n  const { machineName } = useParams();\r\n  const [machineState, setMachineState] = useState({});\r\n  const [services, setServices] = useState([]);\r\n  const [connectionState, setConnectionState] = useState(\"\");\r\n  const [machineAddress, setMachineAddress] = useState(\"\");\r\n  const connection = useContext(SignalRContext);\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      await Promise.all([\r\n        API.fetchServicesList(machineName).then((response) => {\r\n          setServices(response.data);\r\n        }),\r\n        API.fetchMachineList().then((response) => {\r\n          let ipAddress = response.data.filter(\r\n            (ms) => ms.name == machineName\r\n          )[0];\r\n          setMachineAddress(ipAddress.address);\r\n        }),\r\n      ]);\r\n    };\r\n    init();\r\n  }, [machineName]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      if (connection !== null) {\r\n        connection.on(\"MachineHealthReceived\", (response) => {\r\n          if (response.agent === machineName) {\r\n            let updated = {};\r\n            updated.cpu = response.cpuPercentUsage;\r\n            updated.ram = Math.floor(\r\n              100 * (1 - response.memoryFree / response.memoryTotal)\r\n            );\r\n            updated.disc = `${Math.floor(response.discOccupied)}/${Math.floor(\r\n              response.discTotal\r\n            )}`;\r\n            updated.services = `${response.servicesRunning}/${response.servicesCount}`;\r\n            setMachineState(updated);\r\n          }\r\n        });\r\n        connection.on(\"ServiceStatusChanged\", (response) => {\r\n          if (response.agent === machineName) {\r\n            let updated = [...services];\r\n            let indexOfChangedService = updated.findIndex(\r\n              (x) => x.name.toLowerCase() === response.name.toLowerCase()\r\n            );\r\n            updated[indexOfChangedService].status = response.status;\r\n            setServices(updated);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    init();\r\n    return () => {\r\n      connection?.off(\"MachineHealthReceived\");\r\n      connection?.off(\"ServiceStatusChanged\");\r\n    };\r\n  }, [connection, services, machineName]);\r\n\r\n  const servicesPerPage = 10;\r\n  const [activePage, setActivePage] = useState(1);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setActivePage(pageNumber);\r\n  };\r\n\r\n  Modal.defaultStyles.overlay.backgroundColor = \"#2B3139\";\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const showModalHandler = () => {\r\n    let isShowing = showModal;\r\n    setShowModal(!isShowing);\r\n  };\r\n\r\n  // search bar\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const results = services.filter((service) =>\r\n      service.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setSearchResults(results);\r\n  }, [searchTerm, services]);\r\n\r\n  const indexOfLastService = activePage * servicesPerPage;\r\n  const indexOfFirstService = indexOfLastService - servicesPerPage;\r\n  const currentServices = searchResults.slice(\r\n    indexOfFirstService,\r\n    indexOfLastService\r\n  );\r\n  const moreResults = searchResults.length > servicesPerPage;\r\n\r\n  API.test().then((response) => {\r\n    if (response?.status == \"200\") {\r\n      setLoginStatus(true);\r\n    }\r\n  });\r\n  if (!loginStatus) {\r\n    return <LoginModal decline={showModalHandler}></LoginModal>;\r\n  }\r\n\r\n  if (windowSize <= 768) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <ServiceHeaderMobile\r\n            setSearchTerm={setSearchTerm}\r\n            searchTerm={searchTerm}\r\n            setActivePage={setActivePage}\r\n          />\r\n          {currentServices && currentServices.length > 0 ? (\r\n            currentServices.map((service, index) => {\r\n              return (\r\n                //tutaj zamienilem hubConnection na connection ale takie przekazywanie polaczenia przez propsy nie jest potrzebne, teraz mozna uzywac useContext w komponentach\r\n                <ServiceMobile\r\n                  key={index}\r\n                  service={service}\r\n                  index={index}\r\n                  agent={machineName}\r\n                  connection={connection}\r\n                  connectionState={connectionState}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <p className=\"warning-text\">No services detected</p>\r\n          )}\r\n\r\n          {moreResults && (\r\n            <Pagination\r\n              activePage={activePage}\r\n              itemsCountPerPage={servicesPerPage}\r\n              totalItemsCount={searchResults.length}\r\n              pageRangeDisplayed={3}\r\n              onChange={handlePageChange}\r\n              prevPageText=\"<\"\r\n              nextPageText=\">\"\r\n              firstPageText=\"..\"\r\n              lastPageText=\"..\"\r\n            />\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <MachineBar\r\n          machine={machineName}\r\n          address={machineAddress}\r\n          cpu={machineState.cpu}\r\n          ram={machineState.ram}\r\n          disc={machineState.disc}\r\n          services={machineState.services}\r\n        ></MachineBar>\r\n      </div>\r\n      <ServiceHeader\r\n        setSearchTerm={setSearchTerm}\r\n        searchTerm={searchTerm}\r\n        setActivePage={setActivePage}\r\n      />\r\n\r\n      {currentServices && currentServices.length > 0 ? (\r\n        currentServices.map((service, index) => {\r\n          return (\r\n            <Service\r\n              key={index}\r\n              service={service}\r\n              index={index}\r\n              agent={machineName}\r\n            />\r\n          );\r\n        })\r\n      ) : (\r\n        <p className=\"warning-text\">No services detected</p>\r\n      )}\r\n\r\n      {moreResults && (\r\n        <Pagination\r\n          activePage={activePage}\r\n          itemsCountPerPage={servicesPerPage}\r\n          totalItemsCount={searchResults.length}\r\n          pageRangeDisplayed={3}\r\n          onChange={handlePageChange}\r\n          prevPageText=\"<\"\r\n          nextPageText=\">\"\r\n          firstPageText=\"..\"\r\n          lastPageText=\"..\"\r\n        />\r\n      )}\r\n      <Logs></Logs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboards;\r\n","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\LoginModal.js",["132"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\API.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\signalr-context.js",["133","134"],"import React, { createContext, useState, useEffect } from 'react';\r\nimport { HubConnectionBuilder, LogLevel, HubConnectionState } from \"@microsoft/signalr\";\r\nimport {SIGNALR_URL} from \"../config\";\r\n\r\n\r\nconst SignalRContext = createContext(null)\r\n\r\nexport { SignalRContext }\r\n\r\nexport default ({ children }) => {\r\n    const [hubConnection, setHubConnection] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        const connection = new HubConnectionBuilder()\r\n            .withUrl(SIGNALR_URL)\r\n            .configureLogging(LogLevel.Critical)\r\n            .withAutomaticReconnect()\r\n            .build()\r\n\r\n        async function start() {\r\n            try {\r\n                await connection.start();\r\n                setHubConnection(connection)\r\n            } catch (err) {\r\n                console.log(err);\r\n                setTimeout(() => start(), 5000);\r\n            }\r\n        };\r\n        connection?.onclose(start);\r\n        start();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <SignalRContext.Provider value={hubConnection}>\r\n            {children}\r\n        </SignalRContext.Provider>\r\n    )\r\n}","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Authentication\\InMemoryJwt.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Header.js",["135"],"import React, { useState } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport LoginModal from './LoginModal'\r\nimport {API} from '../utils/API'\r\n\r\nconst Header = () => {\r\n    Modal.defaultStyles.overlay.backgroundColor = '#2B3139';\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const showModalHandler = ()=>{\r\n        let isShowing = showModal;\r\n        setShowModal(!isShowing);\r\n      };\r\n\r\n    const testClick = ()=>{\r\n        API.test().then((response)=>{\r\n            console.log(response);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"logo\">\r\n                <img src={'/assets/logo.png'} />\r\n                <h1>Gadget - PR</h1>\r\n            </div>\r\n            <div className=\"log-button\">\r\n                <p onClick={testClick}>Test</p>\r\n            </div>\r\n            <div className=\"log-button\">\r\n                <p onClick={showModalHandler}>Log in</p>\r\n            </div>\r\n            <Modal\r\n            className=\"agent-modal\"\r\n             isOpen={showModal}\r\n             ariaHideApp={false}\r\n            >\r\n                <LoginModal decline={showModalHandler}></LoginModal>\r\n            </Modal>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n",["136","137"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\App.js",[],["138","139"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\reportWebVitals.js",[],["140","141"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\config.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Home\\Main.js",["142"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport MachineTile from \"../Dashboards/MachineDetails/MachineTile/MachineTile\";\r\nimport MachineTileMobile from \"../Dashboards/MachineDetails/MachineTile/MachineTileMobile\";\r\nimport \"../Dashboards/MachineDetails/MachineDetails.css\";\r\nimport Logs from \"../Dashboards/Logs/Logs\";\r\nimport { API } from \"../../utils/API\";\r\nimport { SignalRContext } from \"../../utils/signalr-context\";\r\nimport { useWindowSize } from \"../../Hooks\";\r\nimport Modal from 'react-modal';\r\nimport LoginModal from '../LoginModal';\r\n\r\nconst Home = () => {\r\n  const [machineList, setMachineList] = useState({});\r\n  const connection = useContext(SignalRContext);\r\n  const windowSize = useWindowSize();\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n\r\n  Modal.defaultStyles.overlay.backgroundColor = '#2B3139';\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const showModalHandler = () => {\r\n    let isShowing = showModal;\r\n    setShowModal(!isShowing);\r\n  };\r\n\r\n  function calculateMachineStatus(machine) {\r\n    if (\r\n      machine.cpu > 0.7 ||\r\n      machine.ram > 0.75 ||\r\n      machine.discPercentage > 0.95\r\n    )\r\n      return \"#E13849\";\r\n    if (machine.cpu > 0.6 || machine.ram > 0.6 || machine.discPercentage > 0.7)\r\n      return \"#F0AD4E\";\r\n    if (machine.cpu > 0 || machine.ram > 0 || machine.discPercentage > 0)\r\n      return \"#38E18D\";\r\n    return \"#4B4E75\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    let receivedInitialAPIdata = false;\r\n    if (connection !== null) {\r\n      const init = async () => {\r\n        const response = await API.fetchMachineList();\r\n        let machines = {};\r\n        response.data.map((machine) => {\r\n          return (machines[machine.name] = machine);\r\n        });\r\n        setMachineList(machines);\r\n        receivedInitialAPIdata = true;\r\n      };\r\n      connection.on(\"MachineHealthReceived\", (response) => {\r\n        if (receivedInitialAPIdata)\r\n          setMachineList((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              [response.agent]: {\r\n                name: response.agent,\r\n                cpu: response.cpuPercentUsage,\r\n                ram: 100 * (1 - response.memoryFree / response.memoryTotal),\r\n                disc: `${Math.floor(response.discOccupied)}/${Math.floor(\r\n                  response.discTotal\r\n                )}`,\r\n                services: `${response.servicesRunning}/${response.servicesCount}`,\r\n              },\r\n            };\r\n          });\r\n      });\r\n      init();\r\n    }\r\n\r\n    return () => {\r\n      connection?.off(\"MachineHealthReceived\");\r\n    };\r\n  }, [connection]);\r\n\r\n  const getMachines = () => {\r\n    if (windowSize <= 768) {\r\n      return Object.keys(machineList).map((m, i) => {\r\n        return (\r\n          <MachineTileMobile\r\n            machine={machineList[m].name}\r\n            key={i}\r\n            order={i + 1}\r\n            color={calculateMachineStatus(machineList[m])}\r\n            machineAddress={machineList[m].address}\r\n          ></MachineTileMobile>\r\n        );\r\n      });\r\n    }\r\n    return Object.keys(machineList).map((m, i) => {\r\n      return (\r\n        <MachineTile\r\n          machine={machineList[m].name}\r\n          cpu={machineList[m].cpu}\r\n          ram={machineList[m].ram}\r\n          disc={machineList[m].disc}\r\n          services={machineList[m].services}\r\n          key={i}\r\n          machineAddress={machineList[m].address}\r\n        ></MachineTile>\r\n      );\r\n    });\r\n  };\r\n  API.test().then((response) => {\r\n    if (response?.status == \"200\") {\r\n      setLoginStatus(true)\r\n    }\r\n  })\r\n  if (!loginStatus) {\r\n    return <LoginModal decline={showModalHandler}></LoginModal>\r\n  }\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"machine-tiles-container\">{getMachines()}</div>\r\n      <Logs></Logs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n",["143","144"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceEventsTable.js",["145","146"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Pagination from \"react-js-pagination\";\r\n    \r\n    const ServiceEventsTable = (props)=>{\r\n        const [activePage, setActivePage] = useState(1);\r\n       if(props === null || props.tableData.length <1){\r\n           return null;\r\n       }\r\n\r\n        const eventsPerPage = 10;\r\n        const displayPagination = props.tableData.length>eventsPerPage\r\n        \r\n      \r\n        const handlePageChange = (pageNumber) => {\r\n          setActivePage(pageNumber);\r\n        };\r\n\r\n        const last = activePage * eventsPerPage;\r\n        const first = last - eventsPerPage;\r\n        const currentEvents = props.tableData.slice(first,last);\r\n        \r\n\r\n       const headers =\r\n       Object.keys(currentEvents[0]).map((k, i) => {\r\n           return (\r\n               <div className=\"header-item\" key={i}>\r\n                   {k[0].toUpperCase() + k.slice(1)}\r\n               </div>\r\n           )\r\n       })\r\n\r\n       const data = currentEvents.map((l, i)=>{\r\n           return (\r\n               <div key={i} className=\"logs-table-row\" >\r\n                   {Object.keys(currentEvents[0]).map((k,j)=>{\r\n                       return(\r\n                           <div className=\"log-item\" key={j}>\r\n                               {l[k]}\r\n                           </div>\r\n                       )\r\n                   })}\r\n               </div>\r\n           )\r\n       })\r\n\r\n   return (\r\n       <div className=\"log-table\">\r\n       <div className=\"logs-table-row logs-header\">\r\n            {headers}\r\n       </div>\r\n        {data}\r\n        {displayPagination && (\r\n            <Pagination\r\n              activePage={activePage}\r\n              itemsCountPerPage={eventsPerPage}\r\n              totalItemsCount={props.tableData.length}\r\n              pageRangeDisplayed={3}\r\n              onChange={handlePageChange}\r\n              prevPageText=\"<\"\r\n              nextPageText=\">\"\r\n              firstPageText=\"..\"\r\n              lastPageText=\"..\"\r\n            />\r\n          )}\r\n    </div>\r\n   )}\r\n\r\nexport default ServiceEventsTable;","D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsChart.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\ServiceBasicInfo.js",["147","148","149"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\Main.js",["150","151","152"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\Label.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Logs\\Logs.js",[],["153","154"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineBar\\MachineBar.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\utils\\Helpers.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineTile\\MachineTile.js",["155","156"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"../Chart\";\r\nimport MetricTile from \"../MetricTile\";\r\nimport Label from \"../Label\";\r\nimport \"../MachineDetails.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport deadIcon from \"../images/agent_is_dead.png\";\r\n\r\nconst MachineTile = (props) => {\r\n  const [machineTileState, setMachineTileState] = useState({\r\n    metrics: { RAM: props.ram || 0, CPU: props.cpu || 0 },\r\n    show: \"CPU\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMachineTileState({\r\n      metrics: { RAM: props.ram, CPU: props.cpu },\r\n      show: machineTileState.show,\r\n    });\r\n  }, [props]);\r\n\r\n  const changeMetricData = (event) => {\r\n    setMachineTileState({\r\n      metrics: { RAM: props.ram, CPU: props.cpu },\r\n      show: event.target.value,\r\n    });\r\n  };\r\n\r\n  if (props.cpu >= 0) {\r\n    return (\r\n      <div className=\"machine-tile\">\r\n        <Link to={`/${props.machine}`}>\r\n          <Label\r\n            machineName={props.machine}\r\n            machineAddress={props.machineAddress}\r\n          ></Label>\r\n        </Link>\r\n        <div className=\"metric-tile-container\">\r\n          <MetricTile values={props.services} type=\"service\">\r\n            Services\r\n          </MetricTile>\r\n          <MetricTile values={props.disc} type=\"disc\">\r\n            Disk space\r\n          </MetricTile>\r\n        </div>\r\n        <Chart changed={(event) => changeMetricData(event)} selectable={true}>\r\n          {parseInt(machineTileState.metrics[machineTileState.show])}\r\n        </Chart>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"machine-tile\">\r\n      <Label\r\n        machineName={props.machine}\r\n        machineAddress={props.machineAddress}\r\n      ></Label>\r\n      <div className=\"dead-machine-tile\">\r\n        <img src={deadIcon} height={150} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MachineTile;\r\n",["157","158"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NotificationsSettings.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\Service.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\RestartModal.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\Chart.js",[],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\WebhookItem.js",["159","160","161"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\ServiceDetails\\components\\NewWebhookItem.js",["162"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MetricTile.js",["163"],"D:\\_W_robocie\\Gadget\\Żabik_3\\Gadget---PR\\src\\components\\Dashboards\\MachineDetails\\MachineTile\\MachineTileMobile.js",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":22,"column":27,"nodeType":"170","messageId":"171","endLine":22,"endColumn":45},{"ruleId":"172","severity":1,"message":"173","line":35,"column":29,"nodeType":"174","messageId":"175","endLine":35,"endColumn":31},{"ruleId":"172","severity":1,"message":"173","line":117,"column":26,"nodeType":"174","messageId":"175","endLine":117,"endColumn":28},{"ruleId":"176","severity":1,"message":"177","line":32,"column":25,"nodeType":"178","endLine":32,"endColumn":95},{"ruleId":"168","severity":1,"message":"179","line":2,"column":42,"nodeType":"170","messageId":"171","endLine":2,"endColumn":60},{"ruleId":"180","severity":1,"message":"181","line":10,"column":1,"nodeType":"182","endLine":40,"endColumn":2},{"ruleId":"176","severity":1,"message":"177","line":24,"column":17,"nodeType":"178","endLine":24,"endColumn":49},{"ruleId":"164","replacedBy":"183"},{"ruleId":"166","replacedBy":"184"},{"ruleId":"164","replacedBy":"185"},{"ruleId":"166","replacedBy":"186"},{"ruleId":"164","replacedBy":"187"},{"ruleId":"166","replacedBy":"188"},{"ruleId":"172","severity":1,"message":"173","line":106,"column":26,"nodeType":"174","messageId":"175","endLine":106,"endColumn":28},{"ruleId":"164","replacedBy":"189"},{"ruleId":"166","replacedBy":"190"},{"ruleId":"168","severity":1,"message":"191","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"192","line":1,"column":38,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"193","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"191","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"192","line":1,"column":38,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"194","severity":1,"message":"195","line":66,"column":39,"nodeType":"196","messageId":"197","endLine":66,"endColumn":41},{"ruleId":"172","severity":1,"message":"173","line":77,"column":33,"nodeType":"174","messageId":"175","endLine":77,"endColumn":35},{"ruleId":"198","severity":1,"message":"199","line":90,"column":8,"nodeType":"200","endLine":90,"endColumn":10,"suggestions":"201"},{"ruleId":"164","replacedBy":"202"},{"ruleId":"166","replacedBy":"203"},{"ruleId":"198","severity":1,"message":"204","line":20,"column":6,"nodeType":"200","endLine":20,"endColumn":13,"suggestions":"205"},{"ruleId":"176","severity":1,"message":"177","line":59,"column":9,"nodeType":"178","endLine":59,"endColumn":44},{"ruleId":"164","replacedBy":"206"},{"ruleId":"166","replacedBy":"207"},{"ruleId":"168","severity":1,"message":"193","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":25},{"ruleId":"168","severity":1,"message":"191","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"192","line":1,"column":38,"nodeType":"170","messageId":"171","endLine":1,"endColumn":48},{"ruleId":"168","severity":1,"message":"208","line":16,"column":15,"nodeType":"170","messageId":"171","endLine":16,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":15,"column":21,"nodeType":"178","endLine":15,"endColumn":63},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'setConnectionState' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'HubConnectionState' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["209"],["210"],["209"],["210"],["209"],["210"],["209"],["210"],"'useEffect' is defined but never used.","'useContext' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'machineName' and 'serviceName'. Either include them or remove the dependency array.","ArrayExpression",["211"],["209"],["210"],"React Hook useEffect has a missing dependency: 'machineTileState.show'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMachineTileState' needs the current value of 'machineTileState.show'.",["212"],["209"],["210"],"'createNotifierHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [machineName, serviceName]",{"range":"217","text":"218"},"Update the dependencies array to be: [machineTileState.show, props]",{"range":"219","text":"220"},[3573,3575],"[machineName, serviceName]",[619,626],"[machineTileState.show, props]"]